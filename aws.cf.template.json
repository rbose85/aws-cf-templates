{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create a VPC for `eu-central-1` with a Bastion Server for SSH.",
  "Parameters": {
    "AvailabilityZone": {
      "Description": "Name of an AvailabilityZone.",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Default": "eu-central-1a",
      "AllowedValues": [
        "eu-central-1a",
        "eu-central-1b",
        "eu-central-1c"
      ],
      "ConstraintDescription": "Must be a valid AvailabilityZone."
    },
    "KeyName": {
      "Description": "Name of existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "VPC of related resources."
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Provide access to the Internet for the VPC."
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "A customer RouteTable for the VPC that will include a Route for Internet access."
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetPublic": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Add a Subnet to the VPC with access to the Internet."
          }
        ]
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPublic"
        }
      }
    },
    "SubnetPrivate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Add a Subnet to the VPC without access to the Internet."
          }
        ]
      }
    },
    "ElasticIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "EC2Bastion"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable port 22 traffic for SSH.",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "SecurityGroup to enable SSH connection over port 22 to Bastion Server."
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "EC2Bastion": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "ImageId": "ami-ea26ce85",
        "InstanceType": "t2.nano",
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "SecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "SubnetPublic"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "EC2 Bastion Server to SSH into all EC2 instances of the VPC."
          }
        ]
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the EC2 instance acting as a Bastion Server.",
      "Value": {
        "Ref": "EC2Bastion"
      }
    },
    "AvailabilityZone": {
      "Description": "AvailabilityZone of the EC2 instance acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2Bastion",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS": {
      "Description": "PublicDNSName of the EC2 instance acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2Bastion",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP": {
      "Description": "PublicIP address of the EC2 instance acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2Bastion",
          "PublicIp"
        ]
      }
    }
  }
}
