{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create a VPC for eu-central-1 suitable for Docker Cloud.",
  "Parameters": {
    "AvailabilityZone": {
      "Description": "Name of an AvailabilityZone.",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Default": "eu-central-1a",
      "AllowedValues": [
        "eu-central-1a",
        "eu-central-1b",
        "eu-central-1c"
      ],
      "ConstraintDescription": "Must be a valid AvailabilityZone."
    },
    "KeyName": {
      "Description": "Name of existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Arcadia Digital"
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "VPC of related resources."
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Provide access to the Internet for the VPC."
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Add a RouteTable to provide Internet access to the VPC."
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public"
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Add a public Subnet to the VPC."
          }
        ]
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet"
        }
      }
    },
    "SecurityGroupDocker": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "A SecurityGroup for Docker hosts.",
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroupBastion"
            },
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web Server"
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "A SecurityGroup to that enables ports; 22, 80, and 443."
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "SecurityGroupBastion": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "A SecurityGroup for a Bastion Server.",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Bastion"
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "A SecurityGroup that enables port 22, only."
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "EC2"
        }
      }
    },
    "EC2": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "ImageId": "ami-ea26ce85",
        "InstanceType": "t2.nano",
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "SecurityGroupBastion"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Bastion Server"
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Purpose",
            "Value": "EC2 Bastion Server for SSH access, only."
          }
        ]
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of EC2 acting as a Bastion Server.",
      "Value": {
        "Ref": "EC2"
      }
    },
    "AvailabilityZone": {
      "Description": "AvailabilityZone of EC2 acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS": {
      "Description": "PublicDNSName of EC2 acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP": {
      "Description": "PublicIP address of EC2 acting as a Bastion Server.",
      "Value": {
        "Fn::GetAtt": [
          "EC2",
          "PublicIp"
        ]
      }
    }
  }
}
